@page "/node-detail/{NodeId}"
@using Iot.Greenhouse.Devices
@using Iot.Greenhouse.Nodes
@using Iot.Greenhouse.Blazor.Components
@using Iot.Greenhouse.ExtensionMethods
@using Iot.Greenhouse.Sensors
@using static Iot.Greenhouse.Blazor.Pages.Dashboard
@inject INodeService NodeService
@inject ISensorService SensorService
@inject IDeviceService DeviceService
@inject ISensorDataService SensorDataService

@attribute [StreamRendering(true)]
@rendermode RenderMode.InteractiveServer
@inherits GreenhouseComponentBase
@if (!CurrentUser.IsAuthenticated && Loaded)
{
    <div class="text-center h2">401 Unauthorized</div>
    return;
}
@if (!Loaded)
{
    <div class="text-center h2">Loading...</div>
}
else
{
    @if (Node is null)
    {
        <div class="text-center h2">404 NotFound</div>
        return;
    }
    <div class="text-center h2 mb-4">@Node.Name</div>
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="h4">From</div>
            <div>
                <FluentDatePicker @bind-Value="@MyDate0" />
                <FluentTimePicker @bind-Value="@MyTime0" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="h4">To</div>
            <FluentDatePicker @bind-Value="@MyDate0" />
            <FluentTimePicker @bind-Value="@MyTime0" />
        </div>
    </div>
    <div>
        @foreach(var sensor in NodeViewModel.Sensors)
		{
        }
        <div class="card">
            <div class="card-header h3 text-center">Humidity</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-9">
                        <MyChart ChartPoints="@HumidityChartPoints" Title="" MinValue="40" MaxValue="100" Interval="20" LowValue="60" HighValue="75" />
                    </div>
                    <div class="col-md-3 justify-content-md-center align-midle">
                        <div class="h4">Min: @HumidityStat?.Min.ToString("0.0")</div>
                        <div class="h4">Max: @HumidityStat?.Max.ToString("0.0")</div>
                        <div class="h4">Average: @HumidityStat?.Average.ToString("0.0")</div>
                        <div class="h4">Median: @HumidityStat?.Median.ToString("0.0")</div>
                        <div class="h4">Standard deviation: @HumidityStat?.StdDev.ToString("0.000")</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header h3 text-center">Temperature</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-9">
                        <MyChart ChartPoints="@TemperatureChartPoints" Title="" MinValue="10" MaxValue="40" Interval="10" LowValue="20" HighValue="30" />
                    </div>
                    <div class="col-md-3 justify-content-md-center align-midle">
                        <div class="h4">Min: @TemperatureStat?.Min.ToString("0.0")</div>
                        <div class="h4">Max: @TemperatureStat?.Max.ToString("0.0")</div>
                        <div class="h4">Average: @TemperatureStat?.Average.ToString("0.0")</div>
                        <div class="h4">Median: @TemperatureStat?.Median.ToString("0.0")</div>
                        <div class="h4">Standard deviation: @TemperatureStat?.StdDev.ToString("0.000")</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header h3 text-center">pH</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-9">
                        <MyChart ChartPoints="@PhChartPoints" Title="" MinValue="5" MaxValue="9" Interval="1" LowValue="6.6" HighValue="6.9" />
                    </div>
                    <div class="col-md-3 justify-content-md-center align-midle">
                        <div class="h4">Min: @PhStat?.Min.ToString("0.0")</div>
                        <div class="h4">Max: @PhStat?.Max.ToString("0.0")</div>
                        <div class="h4">Average: @PhStat?.Average.ToString("0.0")</div>
                        <div class="h4">Median: @PhStat?.Median.ToString("0.0")</div>
                        <div class="h4">Standard deviation: @PhStat?.StdDev.ToString("0.000")</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header h3 text-center">Electrical conductivity</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-9">
                        <MyChart ChartPoints="@EcChartPoints" Title="" MinValue="400" MaxValue="800" Interval="100" LowValue="600" HighValue="700" />
                    </div>
                    <div class="col-md-3 justify-content-md-center align-midle">
                        <div class="h4">Min: @EcStat?.Min.ToString("0.0")</div>
                        <div class="h4">Max: @EcStat?.Max.ToString("0.0")</div>
                        <div class="h4">Average: @EcStat?.Average.ToString("0.0")</div>
                        <div class="h4">Median: @EcStat?.Median.ToString("0.0")</div>
                        <div class="h4">Standard deviation: @EcStat?.StdDev.ToString("0.0")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {
    [Parameter] public string NodeId { get; set; } = default!;
    private DateTime? MyDate0 { get; set; } = DateTime.Now;
    private DateTime? MyTime0 { get; set; } = DateTime.Now;
    private DateTime? MyDate1 { get; set; } = DateTime.Now;
    private DateTime? MyTime1 { get; set; } = DateTime.Now;
    public List<MyChart.LineChartData> HumidityChartPoints { get; set; } = default!;
    public List<MyChart.LineChartData> TemperatureChartPoints { get; set; } = default!;
    public List<MyChart.LineChartData> EcChartPoints { get; set; } = default!;
    public List<MyChart.LineChartData> PhChartPoints { get; set; } = default!;
    public Stat? HumidityStat { get; set; }
    public Stat? TemperatureStat { get; set; }
    public Stat? PhStat { get; set; }
    public Stat? EcStat { get; set; }
    public NodeDto? Node { get; set; }
    public NodeViewModel? NodeViewModel { get; set; }

    public bool Loaded { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // if (!CurrentUser.IsAuthenticated)
        //     return;
        if (!Guid.TryParse(NodeId, out var nodeId))
            return;
        try
        {
            Node = await NodeService.GetAsync(nodeId);
            NodeViewModel = new NodeViewModel()
                {
                    Node = Node,
                    Sensors = (await SensorService.GetByNodeId(Node.Id)).Select(x => new SensorViewModel() { Sensor = x }).ToList(),
                    Devices = (await DeviceService.GetByNodeId(Node.Id)).Select(x => new DeviceViewModel() { Device = x }).ToList()
                };
            
        }
        catch (Exception)
        {
            return;
        }

        // (HumidityChartPoints, HumidityStat) = await GetData(nodeId, SensorType.Humidity);
        // (TemperatureChartPoints, TemperatureStat) = await GetData(nodeId, SensorType.Temperature);
        // (EcChartPoints, EcStat) = await GetData(nodeId, SensorType.Ec);
        // (PhChartPoints, PhStat) = await GetData(nodeId, SensorType.Ph);
        Loaded = true;

        await InvokeAsync(StateHasChanged);
    }

    // private async Task<(List<MyChart.LineChartData>, Stat)> GetData(int nodeId, SensorType sensorType)
    // {
    //     double average = default;
    //     double min = default;
    //     double max = default;
    //     double median = default;
    //     double stdDev = default;
    //     List<MyChart.LineChartData> list = new();
    //     var data = await SensorService.GetLatestValue(nodeId, sensorType, DateTime.Now.AddMinutes(-90));
    //     if (data.Count == 0)
    //     {
    //         data = await SensorService.GetLatestValue(nodeId, sensorType, 100);
    //     }

    //     if (data.Count == 0)
    //     {
    //         return (list, new Stat()
    //             {
    //                 Average = average,
    //                 Min = min,
    //                 Max = max,
    //                 Median = median,
    //                 StdDev = stdDev
    //             });
    //     }

    //     foreach (var v in data)
    //     {
    //         list.Add(new() { Period = v.CreationTime, Value = v.SensorValue });
    //     }

    //     average = data.Average(x => x.SensorValue);
    //     min = data.Min(x => x.SensorValue);
    //     max = data.Max(x => x.SensorValue);
    //     median = list.Select(x => x.Value).Median();
    //     stdDev = list.Select(x => x.Value).StandardDeviation();

    //     return (list, new Stat()
    //         {
    //             Average = average,
    //             Min = min,
    //             Max = max,
    //             Median = median,
    //             StdDev = stdDev
    //         });
    // }

    private double GetRandomDouble(double min, double max)
    {
        if (min >= max)
        {
            throw new ArgumentException("Min value must be less than max value");
        }
        var num = Random.Shared.NextDouble() * (max - min) + min;
        return Math.Round(num, 1);
    }

    public class Stat
    {
        public double Min { get; set; }
        public double Max { get; set; }
        public double Average { get; set; }
        public double Median { get; set; }
        public double StdDev { get; set; }
    }
}