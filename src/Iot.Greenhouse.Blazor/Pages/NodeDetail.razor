@page "/node-detail/{NodeId}"
@using Iot.Greenhouse.Devices
@using Iot.Greenhouse.Nodes
@using Iot.Greenhouse.Blazor.Components
@using Iot.Greenhouse.ExtensionMethods
@using Iot.Greenhouse.Sensors
@using static Iot.Greenhouse.Blazor.Pages.Dashboard
@inject INodeService NodeService
@inject ISensorService SensorService
@inject IDeviceService DeviceService
@inject ISensorDataService SensorDataService

@attribute [StreamRendering(true)]
@rendermode RenderMode.InteractiveServer
@inherits GreenhouseComponentBase
@if (!CurrentUser.IsAuthenticated && Loaded)
{
    <div class="text-center h2">401 Unauthorized</div>
    return;
}
@if (!Loaded)
{
    <div class="text-center h2">Loading...</div>
}
else
{
    @if (Node is null)
    {
        <div class="text-center h2">404 NotFound</div>
        return;
    }
    <div class="text-center h2 mb-4">@Node.Name</div>
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="h4">
                <span>From</span>
            </div>
            <FluentDatePicker Value="FromDate" ValueChanged="@(e => FromDate = e.GetValueOrDefault())" />
            <FluentTimePicker Value="FromTime" ValueChanged="@(e => FromTime = e.GetValueOrDefault())" />
        </div>
        <div class="col-md-6">
            <div class="h4">
                <span>To</span>
            </div>
            <FluentDatePicker Value="ToDate" ValueChanged="@(e => ToDate = e.GetValueOrDefault())" />
            <FluentTimePicker Value="ToTime" ValueChanged="@(e => ToTime = e.GetValueOrDefault())" />
        </div>
    </div>
    <div>
        @foreach (var sensor in NodeViewModel.Sensors)
        {
            <SensorStatComponent Sensor="sensor" />
        }

    </div>

}

@code {
    [Parameter] public string NodeId { get; set; } = default!;
    private DateTime _fromDate = DateTime.Now.AddDays(-10);

    private DateTime FromDate
    {
        get => _fromDate;
        set
        {
            _fromDate = value;
            GetData().Wait();
        }
    }
    private DateTime _fromTime = DateTime.Now;
    private DateTime FromTime
    {
        get => _fromTime;
        set
        {
            _fromTime = value;
            GetData().Wait();
        }
    }
    private DateTime _toDate = DateTime.Now;
    private DateTime ToDate
    {
        get => _toDate;
        set
        {
            _toDate = value;
            GetData().Wait();
        }
    }
    private DateTime _toTime = DateTime.Now;
    private DateTime ToTime
    {
        get => _toTime;
        set
        {
            _toTime = value;
            GetData().Wait();
        }
    }

    public NodeDto? Node { get; set; }
    public NodeViewModel? NodeViewModel { get; set; }

    public bool Loaded { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // if (!CurrentUser.IsAuthenticated)
        //     return;
        if (!Guid.TryParse(NodeId, out var nodeId))
            return;
        try
        {
            Node = await NodeService.GetAsync(nodeId);
            await GetData();

        }
        catch (Exception)
        {
            return;
        }
        Loaded = true;

        await InvokeAsync(StateHasChanged);
    }
    private async Task GetData()
    {
        Loaded = false;
        await InvokeAsync(StateHasChanged);
        DateTime from = new DateTime(FromDate.Year, FromDate.Month, FromDate.Day, FromTime.Hour, FromTime.Minute, FromTime.Second);
        DateTime to = new DateTime(ToDate.Year, ToDate.Month, ToDate.Day, ToTime.Hour, ToTime.Minute, ToTime.Second);
        NodeViewModel = new NodeViewModel()
            {
                Node = Node,
                Sensors = (await SensorService.GetByNodeId(Node.Id)).Select(x => new SensorViewModel()
                {
                    Sensor = x,
                    Data = SensorDataService.GetByDate(x.Id, from, to).Result
                }).ToList(),
                Devices = (await DeviceService.GetByNodeId(Node.Id)).Select(x => new DeviceViewModel()
                {
                    Device = x
                }).ToList()
            };
        Loaded = true;
        await InvokeAsync(StateHasChanged);
    }
    private async Task BtnRefreshClick()
    {
        await GetData();
    }
}